#next 

for ( i in 1:10) {
  print(i) 
 } 
 
 for ( i in 1:10) {
  if (i ==5) {
   break
   }
   print(i) 
 } 
 
 #연습문제 
 #1부터 100까지 구하되, 짝수만 더하면? 
 
 even_num <-c()
 
 for ( i in 1:100) {
  if ( i %% 2 == 0) {
  even_num <- c(even_num, i) 
  
} 
} 
sum(even_num)

#선생님(for)
v_sum <-0
for ( i in 1:100) {
if ( i %% 2 !=0) {
next 
}
v_sum <- v_sum + i 
} 


#선생님(while)
i <- 0 
vsum <- 0 
while ( i <= 100) { 
  i <- i +1 # i =1 일때 스킵되면서 증가되지 않는 것을 방지  
  if ( i%%2 !=0) { 
    next 
}
 vsum <- vsum + i 
  }
vsum 

# 아래 벡터를 출력하되,  NA 이전까지만 출력
v1<-c()
v1 <-c(1,2,3,NA,4,5,6) 

v1_new<-c()
for ( i in v1) {
 v1_new <- c(v1_new, i)
   if  (is.na(i))
    break 
  
} 
v1_new

#선생님 

for (i in v1) {
 if(is.na(i)) {
   break
   }
   print(i)
   } 


#repeat 반복문 : break를 직접 설정해줘야함 
#***R의 장점 - 벡터연산이 잘됨, 

#산술연산
sum(..., na.rm = F)
mean(x, ...) #메뉴얼에서 ...이라 되있으면 설명이 안써있어도 다른 연산에서 수행가능한 옵션을 해보고 쓸 수 있음 쓰면됨 
sum(1,2,3) #sum 함수는 나열된 원소 값의 합을 구할 수 있음 
mean(1,2,3) #mean함수는 나열된 원소 값의 평균을 구할 수 없음
mean(c(1,2,3)) #c로 묶어야만 1,2,3의 mean을 구할 수 있음 

v1 <- c(1,2,3,NA)
sum(v1) #NA 
mean(v1) #NA 
sum(v1, na.rm =T) #na.rm을 무시하고 연산 수행 *******  
mean(v1, na.rm =T) #na.rm을 무시하고 연산 수행 *******  3개의 평균 
mean(ifelse(is.na(v1),0,v1)) #na를 0으로 치환한후 4개의 평균을 구함

str_replace(v1,NA,0) #NA 치환 불가, 
str_replace_na(v1,0) #NA 치환가능하지만, 문자로 리턴됨 이유는 명령어 자체가 문자형이기 때문에 문자형으로 리턴됨  

#연습문제
#1 다음의 벡터에 반복문을 사용하여 10% 인상된 가격의 총합을 구하여라
v1 <-c(1000,1500,NA,3000,4000)

v1_sum <- c()
for ( i in v1) {
v1_sum <- sum(c(v1_sum, i*1.1), na.rm=T) 
sum(v1_sum)
} 
v1_sum 

#선생님
sum(ifelse(is.na(v1), 0, v1*1.1))

vsum <-0 
for ( i in v1 ) {
  if (is.na(i)) {
  next 
  }
  vsum <-vsum + i*1.1
  }
vsum 

#사용자 정의 함수 : 사용자가 직접 만드는 함수, 리턴대상필요, 리턴 구문은 여러개지만 리턴의 결과값은 한개만 나올 수 있게 만들어야함 
함수명 <- function (...) {
cmd1
cmd2
...
return(객체) 
}

#예제 abs 기능을 수행하는 사용자 정의함수 생성 
abs(-2) 

f_abs <-function(x) { 
  if ( x >= 0 ) {
    return (x)
	} else {
	return(-1*x) 
	}
}
	
f_abs(-1)  
f_abs(10)


#연습문제
# 두 수를 입력받아 두 수의 합을 출력하는 함수 생성 
f_sum <- function(x=0,y=0) {  #x와 y의 기본값 설정 =0 
 return(x+y)
}  
f_sum(x=10, y=11)
f_sum(1,11)
f_sum(x=10)

#연습문제 
#f_split 만들어보기 
#f_split('a#b#c', '#', 2) => b 결과값이 나오게 

f_split <- function(x,y,z) { 
 str_split(x, y)[[1]][z]
} 

f_split('a#b#c', '#', 3)

 
#선생님
f_split <- function(x, sep=' ', ord=1) {  #기본값 설정 잘 해줘야함 
  str_split(x, sep)[[1]][ord] 
}
  
str_split('a#b#c', '#')

f_split('a#b#c', '#', 2)

#예제) 다음의 벡터에서 각각 b, B 추출되도록 
v1[1]
v1[2]
v1 <- c('a#b#c#', 'A#B#C#') 
str_split(v1, '#')[[1]][2] # 단독으로 불가, 반복문 필요 b
str_split(v1, '#')[[2]][2] # 단독으로 불가, 반복문 필요 B

str_split(v1[1], '#')[[1]][2] # 단독으로 불가, 반복문 필요 b
str_split(v1[2], '#')[[1]][2] # 단독으로 불가, 반복문 필요 B

str_split(v1, '#')[[1]][2]
f_split(v1,'#', 2) # 벡터연산 불가 1층의 값인 b만 리턴됨 

sapply(v1, f_split, '#',2) #sapply를 사용하면 b와 B 함께 리턴됨 


#[연습문제]
# f_sum2(100) = 1+2+3+...+100 함수 만들기 합은 5050 
vsum <-0 
i <-0

f_sum2 <- function(x) {
 
  for ( i in 1:x ){
   vsum <-  sum(c(vsum, i)) 
   return(x)
  }
  }
  

  f_sum2(100)
  
#선생님 
 
f_sum2 <- function(x) {
  vsum <-0
  for ( i in 1:x ){
   vsum <-  vsum+i 
   }
   return(vsum)
  }
  
 f_sum2(100)
 
 f_sum2 <- function(x) {
  sum(1:x) 
  return(vsum)
  }
  sum(1:100)



 
 i  vsum 
 1  1
 2  1+2
 3  1+2+3
  
 