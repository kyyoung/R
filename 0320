#문자의 포맷 변경 함수 
movie <-read.csv("movie_ex1.csv", stringsAsFactors=F) 

to_char(1234, '09999') => '01234' 

#예제 movie 데이터의 월 컬럼을 두자리로 표현 
str_pad(movie$월, 2, 'left', '0')
movie$월 

#
sprintf(fmt, data) # fmt : 변경포맷(s:문자열, d:정수, f:실수) 
sprintf('%2d',2) #2를 두자리 문자열로 변경, 빈칸 삽입 : " 2"
sprintf('%02d',2) #2를 두자리 문자열로 변경, 0삽입 : "02"
sprintf('%.2f',1234) # 두자리 소수점 표현 : "1234.00"

#예제 movie 데이터의 월 컬럼을 두가지로 표현 
str_pad(movie$월, 2, 'left', '0') 
v_mon<-sprintf('%02d', movie$월)  
v_day<-sprintf('%02d', movie$일)
as.Date(str_c(movie$년, v_mon, v_day), '%Y%m%d') 

#연습문제 
#movie 파일을 읽고 연령대별 평균이용률이 가장 높은 요일을 이용률과 함께 출력 

v_date2<-str_c(movie$년, movie$월, movie$일, sep = '-')
movie$day <-as.character(as.Date(v_date2), '%A')
movie

df1<-aggregate(movie$이용_비율..., by=list( movie$연령대, movie$day), FUN=mean)
df2<-aggregate(df1$x, by=list(df1$Group.1), FUN = max)

df3<-merge(df2, df1, by=c('Group.1','x')) 
colnames(df3) <-c('연령대', '이용_비율', 'time')

#선생님 

df1<-aggregate ( 이용_비율... ~연령대 + day, data= movie, FUN = mean) 
df2<-aggregate ( 이용_비율... ~연령대 , data= df1, FUN = max)

merge(df1, df2, by=c('연령대', '이용_비율...')) 

#연령별 이용률 max 값 확인하고 그 값이 무슨 요일인지 확인 
library(doBy) 
orderBy( ~ 연령대 - 이용_비율... , data=df1 ) #연령대별 이용률max값이 맨 위에 위치 

#2. card_history 파일을 읽고 다음과 같이 일별 업종 지출비율 출력 
card <-read.csv('card_history.csv', stringsAsFactors = F) 
str(card) 

f1 <- function(x) {
as.numeric(str_remove_all(x, ','))
}
card[,c(2:7)]<-apply(card[,c(2:7)],c(1:2),f1)

f2 <-function(x) {
 vt_t <- c()
 vt_t<-c(vt_t,(x/sum(x))*100) 
 return (vt_t) 
 }
card_1<-apply(card[,c(2:7)],2,f2)

vt_1 <- sum(card$식료품) 
vt_2 <- (card$식료품/sum(card$식료품))*100

#선생님 

#천단위구분기호 제거 및 숫자 변경 
f1 <- function(x) {
 as.numeric(str_remove_all(x,','))
 }
card[,] <- apply(card, c(1,2), f1)

#sol1) 각 컬럼을 연산 
card$식료품 /sum(card$식료품)*100 #벡터/스칼라 잘됨 
card$의복 /sum(card$의복)*100 #벡터/스칼라 잘됨 

#sol2) 함수 만들기
f2 <- function(x) {
 x/sum(x)*100
 }
 
 card[,-1]<-apply(card[, -1], 2, f2) 
 card[,-1]<-sapply(card[,-1], f2) 
 apply(card,2,sum) # 컬럼끼리 더해서 100이 나오느지 확인 
 
# 예제 위 데이터를 일별 지출비율로 변경 
f2 <- function(x) {
 x/sum(x)*100
 }
 
apply(card[,-1],1,f2) #컬럼의 위치가 행으로 들어감 
t(apply(card[,-1],1,f2)) # t라는 함수를 사용하여 행과 열의 위치를 원본 그대로 복원 

#sqldf
#R 내부에서 sql 문법을 통해 데이터 처리 가능하게 하는 함수
#ansi 표준, oracle 표준 모두 적용 가능
#몇가지 전달되지 않는 표현식 있어 주의
install.packages('sqldf') 
library(sqldf) 

install.packages('googleVis')
library(googleVis) 

Fruits #googleVis 패키지에 포함된 데이터

#예제1) Fruits 데이터에서 2010냔 데이터의 과일이름, sales 출력 
Fruits[Fruits$Year ==2010, c('Fruit', 'Sales')] #R문법

sqldf('select Fruit, Sales from Fruits where Year==2010')  #SQL문법 

#예제2) Fruits 데이터에서 Apples,  Oranges 데이터만 출력 
Fruits[Fruits$Fruit %in% c( 'Apples', ' Oranges'), ] 

sqldf('select * from Fruits where Fruit in ('Apples', 'Oranges')')  #''를 쓰면 충돌, apple과 orange가 안읽힘
sqldf("select * from Fruits where Fruit in ('Apples', 'Oranges')")  #그렇기 때문에 "" 쓰면됨 R에서는 '', "" 구분 없음 
sqldf('select * from Fruits where Fruit in (\'Apples\', \'Oranges\')') # escape 문자인 \를 사용해줌 

#예제3) 각 과일별 sales의 총합 
aggregate( Fruits$Sales, list(Fruits$Fruit), FUN=sum) 
sqldf('select sum(sales) As "Sum_sales" from Fruits group by Fruit') 

#선생님 
tapply(Fruits$Sales, Fruits$Fruit, sum) 
aggregate( Sales~Fruit, data=Fruits, FUN= sum) 
v_sql <-'select Fruit, sum(Sales)  As "Sum_sales" from Fruits group by Fruit' 
sqldf(v_sql)


#예제4) emp 데이터의 각 부서별 최대 연봉자 이름, 부서번호 ,연봉출력 
emp <- read.csv("emp.csv", stringsAsFactors =F) 

emp_max<-aggregate(SAL ~ DEPTNO, data=emp , FUN=max) 
emp_merge<-merge( emp, emp_max, by=c('DEPTNO', 'SAL')) 
emp_merge[ , c('ENAME', 'DEPTNO', 'SAL')] 

sqldf('select ENAME, DEPTNO, max(SAL) from emp group by DEPTNO')

#선생님 
v_sql1 <-'select * from emp where(DEPTNO, SAL) in (select DEPTNO, max(SAL) from emp group by DEPTNO)'
v_sql2 <-'select * from emp e1, (select DEPTNO, max(SAL) AS MAX_SAL from emp e2 group by DEPTNO) e2 where e1.DEPTNO= e2.DEPTNO and e1.SAL =e2.MAX_SAL'

sqldf(v_sql1)
sqldf(v_sql2) 

#예제5 emp 데이터에서 3건만 출력 
emp[c(1:3),] 
sqldf('select * from emp where rownum <=3' ) #in sql 실행불가 
#오라클 select rownum, rowid e1.* from emp e1 where ROWNUM < 3, 
#rownum이라는 함수와 * 동시에 출력이 안됨, 그래서 e1의 객체를 끌고와서 rownum 실행, 하지만 출력의 결과는 조회된 결과에 따라 나옴, 1일때만 1행의 데이터가 무엇인지 알 수 있음
#ROWNUM을 이용하여 데이터 확인차 출력하는 것
#ROWID는 주민번호 처럼 각 데이터에 부여되는 고유번호 
sqldf('select * from emp  limit 3' ) #in R 3행까지만 출력 

 