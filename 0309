#1.vector
#2.list
l1 <-list(col1=c(1,2,3), col2=c('a','b')); l1
l1[1][2]
l1[2]
#1층밖에 없는 데이터에 2층을 출력하라고 값을 입력했기 때문에 값이 na 

#연속적 색인을 출력하기 위한 방법
l1$col1[2] 
l1[[2]][2]

#3.matrix
#4.array 
#다차원, 동일데이터 타입만 허용함 
#차원의 확장(색인의 순서와 연결됨)
#      R      vs.   python  
#2차원 행, 열           행, 열 
#3차원 행, 열, 층        층, 행, 열 

#3*4형식
a1 <- array(data=1:12, dim=c(3,4) ) ; a1
#2*2*3형식 
a2 <- array(data=1:12, dim=c(2,2,3)); a2

#색인 연습 
a2
a2[1,1,3] #첫번째행, 첫번째열,세번째 층 추출 
a2[,,2]  #2차원 
a2[,,3,drop=F] #층 체크 해줌
a2[,,3] #층 체크 안해줌
#3. 차원 확인
dim(a2) #2행2열3층 

#5.data.frame 

#vector -> matrix -> array : 단 하나의 유형만 갖고 있는 데이터 
#list >-data.frame : 다른 유형의 데이터를 저장할 수 있음 

#if문
#조건문
#조건에 따른 치환 또는 다른 ***프로그래밍 가능(특정 벡터 생성, 컬럼 삭제 등)***
#벡터연산이 불가 : 원소별 조건 치환 반복이 불가함 
#[기본문법]
#if(조건 {
# 참일때 수행 문장
# } else if(조건) {
# 참일때 수행 문장
# } else {
# 거짓일 때 수행 문장
# }

#예제) v1의 값이 10이면 'A' 아니면 'B'로 출력 
v1 <-20
if (v1==10) { 
  'A'
} else if (v1>20) {
  'B'
} else {
  'C'
  }
  
#예제) v2의 값이 10이면 'A' 아니면 'B'로 출력 (if문의 단점) 
v2<-c(10,20,30) 

if (v2==10) { 
  'A'
} else {
  'B'
}

#A만 출력됨 나머지 20과 30에 관한 값은 나오지 않음, 
#v2 + 10 #벡터의 원소마다 반복해서 적용됨 원소마다 10씩 더해지는 것이 적용됨
#하지만 if 문에서는 벡터 원소마다 반복해서 적용되지 않음

#if else 문 (조건의 벡터 연산이 가능)
#조건문
#조건에 따른 치환, 리턴만 가능 
#else 리턴 생략 불가
#ifelse(조건, 참일때 리턴값, 거짓일 때 리턴값, 기타 프로그래밍에 대한 복잡한 처리는 불가함) 

#예제) v2의 값이 10이면 'A' 아니면 'B'로 출력 (if문의 단점) 
v2<-c(10,20,30) 

ifelse (v2==10, 'A', 'B') #오라클의 decode문과 비슷함 decode(v2,10,'A','B') 

#예제) v2의 값이 30보다 크면 'A' 20보다크면 'B', 기타 'C'
ifelse (v2>30, 'A', ifelse(v2>20, 'B', 'C'))
 
#연습문제
emp.csv 파일을 읽고 
1)dname이라는 컬럼 추가, 
10번 부서는 인사부, 20번 총무부, 30번은 재무부

getwd()
emp1 <-read.csv('emp.csv', stringsAsFactors=FALSE)
str(emp1)
emp1$DNAME <-ifelse (emp1$DEPTNO ==10, '인사부',ifelse(emp1$DEPTNO==20, '총무부', '재무부'))

#선생님
emp1$dname <- ifelse(emp1$DEPTNO ==10, '인사부', ifelse(emp1$DEPTNO==20, '총무부', '재무부'))
#for문 사용 
emp1$dname <-c()
DEPT<-c()
for (i in DEPT) {
  if ( i == 10) {
    DEPT <-c(DEPT, '인사부')
	} else if ( i ==20) {
	DEPT <-c(DEPT, '총무부') 
	} else {
	DEPT <-c(DEPT, '재무부')
	}
	}
emp1$dname <- DEPT 
#for문-선생님
v_dname <-c()

for (i in emp$DEPTNO) {
  if ( i == 10) {
    v_dname <-c(v_dname, '인사부')
	} else if ( i ==20) {
	v_dname <-c(v_dname, '총무부') 
	} else {
	v_dname <-c(v_dname, '재무부')
	}
	}
emp$dname <-v_dname


2)new_sal이라는 컬럼 추가
sal이 3000이상인 경우 5%인상, 미만인 경우  10%인상 
emp1$new_sal<-ifelse(emp1$SAL>=3000, emp1$SAL*1.05, emp1$SAL*1.1)
emp1

emp1$new_sal <-ifelse(emp1$SAL >=3000, emp1$SAL*1.05, emp1$SAL*1.1) 

#for문 사용 
emp1$new_sal2 <-c()
v3 <- emp1$new_sal2
v2 <- emp1$SAL 
for ( i in v2) {
  if ( i >= 3000) {
  v3 <- c(v3, i*1.05) 
  } else {
  v3 <- c(v3, i*1.1) 
  }
  }
  
#for문-선생님
v3<-c()
for ( i in emp1$SAL) {
  if ( i >= 3000) {
  v3 <- append(v3, i*1.05) #append를 사용해서 벡터에 계속 값을 추가함 
  } else {
  v3 <- append(v3, i*1.1) 
  }
  }
  
emp1$new_sal2 <- v3 


#for문 
#반복문 
#반복횟수가 정해져있음 
#기본문법
# for(반복변수 in 대상 or 횟수) { 
#    반복처리
#	}

for (i in 1:10) {
  print (i)
}

#i <- 1; print(i)
#i <- 2; print(i)
#...
#i <- 10; print(i) 
#까지 반복시키는게 for문

#예제) v2의 값이 10이면 'A' 아니면 'B'로 출력 (for문 사용) 
v2<-c(10,20,30) 

for(i in v2){      #v2의 값이 여러개이기때문에 반복문을 사용하여 i변수를 통해 v2의 값을 하나씩 꺼내서 if문 시행함    
if (i == 10) {
 print('A')   #print명령어를 사용해야 결과에 대한 값이 리턴됨, for문은 리턴값이 아닌 실행문장이 필요함 
 } else {
 print('B')
 }
}

#for문의 결과를 v3에 담고 싶지만 담기지 않음 이유는 리턴한 결과값이 벡터값이 아님 
v3<- for(i in v2){      #v2의 값이 여러개이기때문에 반복문을 사용하여 i변수를 통해 v2의 값을 하나씩 꺼내서 if문 시행함    
if (i == 10) {
 print('A')   #print명령어를 사용해야 결과에 대한 값이 리턴됨, for문은 리턴값이 아닌 실행문장이 필요함 
 } else {
 print('B')
 }
}

for(i in v2){        
if (i == 10) {
 v_3<-'A'   
 } else {
 v_3<-'B'
 }
}
v_3; 
#위의 명령문 실행 순서 
i <- 10; v_3 <- 'A' 
i <- 20; v_3 <- 'B' 
i <- 30; v_3 <- 'B' 
#마지막 출력 값 B, 값이 누적이 안되고 맨 마지막 것만 나타남 계속 값을 덮어쓰기 때문 

v4 <-c() #v4의 형태를 만들어 놓아야함(삽입이 직접적으로 되지 않음), 빈벡터 선언 
for (i in v2){        
  if (i == 10) {
    v4<-c(v4, 'A')   #연산결과 누적을 위한 처리 
  } else {
    v4<-c(v4, 'B')   #연산결과 누적을 위한 처리 
  }
}

v4

#처리순서
i <- 10; v_3 <- 'A' 
i <- 20; v_3 <- 'A', 'B'  
i <- 30; v_3 <- 'A', 'B','B' 


#명령문이 실행되는 순서 
# step1) i <-10을 할당하고
# step2) 
if (i == 10) {
 'A'
 } else {
 'B'
 }
#조건이 맞는지 살펴봄 


#예제) 1~10을 갖는 벡터에서 5보다 작거나 같은 경우는 곱하기 1, 6이상인 경우는 곱하기 2를 리턴

#1) ifelse
v6 <-1:10 
ifelse(v6 <=5, v6, v6*2) 
#2) for + if : if 문에 단 하나의 원소 대입위해 프로그래밍 
v6_n <-c()
for (i in v6) {
if (i <=5) {
  v6_n <- c(v6_n, i)
} else {  
 v6_n <- c(v6_n, i*2) 
}
}

v6_n

#while 문 
#조건 기반 반복문(for문은 정해진 대상/횟수 내 반복) 
#for문처럼 다음 단계로 자동으로 넘어가지 않음 
#기본문법
#while (조건) {
#   반복문장 
#  }

#예제 1~10까지 출력 
j <- 1 #초기값 설정, j는 선언되지 않은 변수이기 때문에 j의 초기값을 먼저 설정해줘야함 
while ( j <= 10) {   
print (j)
}  #계속 1값이 반복됨, 이유는 자동으로 다음단계로 넘어가지 못하기 때문에 j=1값이 무한루프 

while ( j <= 10) {   
print (j)
  j <- j+1 #자동으로 값이 넘어가지 않기때문에 설정을 해줘야함 
} 
 
 
#연습문제
# 1~100의 총합 출력 : 5050 

i<-1 
vsum <- 0 
while (i<=100) {
 vsum <- vsum + i 
 i <- i + 1
}
vsum

sum <-0
for ( i in 1:100) {
sum <- sum + i
}
print(sum) 