#plyr 패키지 
#apply 계열 함수들과 비슷
#출력 결과 주로 데이터 프레임
#{입력}{출력}ply 형식의 함수 제공
#adply : array 입력(다차원의 데이터 형태) - dataframe 출력, mean은 버그 느낌이라 잘 안씀 
#ddply : dataframe입력 - dataframe 출력 

install.packages('plyr') 
library(plyr) 

#1. adply 
#2차원 데이터 셋 입력( array, matrix, data.frame 가능) 
#data.frame 출력 
#apply함수와 비슷 ( 행별, 열별 그룹연산 주로 수행, 원소별도 수행하나 거의 안씀)

iris  
apply(iris[,-5],2, mean) #출력결과는 벡터 
apply(iris[,-5],1, mean) #출력결과는 벡터 

adply(iris[,-5],2, mean) #버그때문에 mean에서는 na 출력 
adply(iris[,-5],1, mean) #버그때문에 mean에서는 na 출력 
#na가 리턴되는 이유 :  데이터프레임 입력시 분리된 데이터 셋이 데이터 프레임, 즉 데이터프레임 형식으로 함수에 전달(적용)함 
v1 <- 1:10
df1 <- data.frame(v1)

sum (v1)  #55
sum(df1)  #55

mean(v1) #5.5 
mean(df1) #NA, 데이터프레임 형태에서는 mean 계산이 안됨 
#데이터프레임에서 mean을 수행하는 방법 : dataframe 형식이 아닌(입력 데이터셋의 key형식 탈락) 매트릭스 형식으로 값을 전달 
adply(as.matrix(iris[,-5]),1,mean) 


apply(iris[,-5],1, sum ) #출력결과는 벡터 
adply(iris[,-5],1, sum ) #컬럼 추가 형식 가능, 출력결과 기존데이터 프레임에 붙여서 나옴
apply(iris[,-5],2, sum ) #출력결과는 벡터
adply(iris[,-5],2, sum ) #행의 추가 형식은 선호하지 않기 때문에 기존데이터 프레임에 붙여서 나오지 않고 sum의 결과만 나옴, 하지만 형태는 데이터프레임 

#2. ddply 
#data.frame 입력, data.frame 출력 
#그룹연산 수행 함수

#문법
ddply( data, variables, fun, ...) #(데이터프레임, group by 컬럼 .('col1', 'col2') 형식 전달), ddply 내부함수, group by 표현식) 

#ddply 내부함수 
# 1. transform : 원본 데이터프레임에 그룹연산 수행결과 같이 표현, 
# 2. mutate : transform과 비슷하나 연산결과 재사용 가능 
# 3. summarise : 일반 group by 수행함수, 그룹연산의 요약정보 출력 
# 4. subset : 그룹연산 수행결과에 조건 전달 가능 

#예제- emp 데이터에서 부서별 평균 연봉
ddply(emp, DEPTNO, summarise, v1=mean(SAL)) #오류

ddply(emp, .(DEPTNO), summarise, v1=mean(SAL)) #수행함 .() 중요!! 
ddply(emp, .(DEPTNO), transform, v1=mean(SAL)) #기존뎅터형식에 붙여서 그룹연산 수행결과 표현 (정렬동반) 

##예제- emp 데이터에서 부서별 최대 연봉

#sol1) 
df_max <-ddply(emp, .(DEPTNO), transform, v1=max(SAL))#v1컬럼에 그룹연산 수행결과를 담아서 출력함, 데이터프레임에 붙어있는 것이기 때문에 최대연봉자를 쉽게 구할 수 있음  
df_max[df_max$SAL ==df_max$v1, ] #최대 연봉자 출력 
ddply(emp, .(DEPTNO), transform, max(SAL)) #max(sal)이 출력되지 않음 

#sol2) 
ddply(emp, .(DEPTNO), subset, SAL == max(SAL)) 
ddply(emp, .(DEPTNO), subset, SAL = max(SAL)) #SAL이 max(SAL) 값으로 바뀜 주의** 시험** 

#예제 - emp 데이터에서 각 부서별 평균연봉을 구하고, log값 리턴 
ddply(emp, .(DEPTNO), transform, v1=mean(SAL)) 
ddply(emp, .(DEPTNO), transform, v1=mean(SAL), v2=log(v1)) #오류, v1 재사용 불가 
ddply(emp, .(DEPTNO), mutate, v1=mean(SAL), v2=log(v1)) #사용가능 v1 재사용 가능, 로그값 구할 수 있음  

#연습문제 : emp 데이터에서 부서별 평균연봉보다 적은 연봉을 받는 사원 출력 


df_mean <-ddply(emp, .(DEPTNO), transform, v1=mean(SAL))
df_mean [df_mean $SAL < df_mean$v1, ]

ddply(emp, .(DEPTNO), subset, SAL < mean(SAL))

tapply(emp$SAL, emp$DEPTNO, mean)>

#aggregate 이용 
emp_mean <- aggregate( SAL ~ DEPTNO, data=emp, FUN=mean)
df_emp <- merge( emp, emp_mean, by='DEPTNO', all.x =T)  
df_emp[(df_emp$SAL.x < df_emp$SAL.y), ] 



#student 데이터를 읽고 
std <-read.csv('student.csv', stringsAsFactors = F) 
#1) 각 학년별 몸무게의 최대 값 출력 
ddply( std, .(GRADE), summarise, v1=max(WEIGHT) ) 
aggregate(std$WEIGHT, list(std$GRADE), FUN=max) 
aggregate(WEIGHT~GRADE, data=std, FUN=max) 
tapply(std$WEIGHT, std$GRADE, max) 

#선생님 na.rm 위치 잘 보기 
tapply(std$WEIGHT, std$GRADE, max, na.rm = T) 
aggregate(WEIGHT~GRADE, data=std, FUN=max, na.rm = T) #서로다른 함수 전달 불가 예시) 몸무게 최소, 키의 최대값 출력 
ddply( std, .(GRADE), summarise, v1=max(WEIGHT, na.rm = T) ) 


#2) 키가 학년별 평균 키보다 작은 학생 출력 
ddply( std, .(GRADE), subset, HEIGHT < mean(HEIGHT))

std_mean <- aggregate(HEIGHT ~ GRADE, data=std, FUN=mean) 
df_std <- merge(std, std_mean, by='GRADE', all.x=T) 
df_std[(df_std$HEIGHT.x < df_std$HEIGHT.y), ] 

#선생님 
ddply( std, .(GRADE), subset, HEIGHT < mean(HEIGHT))

#3) 각 학년별 몸무게, 키의 최대값 출력 
#(그룹연산 컬럼 두개 이상인 경우)

ddply(std, .(GRADE), summarise, v1=max(WEIGHT), v2=max(HEIGHT)) 
aggregate(cbind(WEIGHT,  HEIGHT) ~GRADE, data=std, FUN=max) 
aggregate(std[,c('HEIGHT', 'WEIGHT')], by=list(std$GRADE), FUN= max)  

#선생님 
aggregate(cbind(WEIGHT,  HEIGHT) ~GRADE, data=std, FUN=max) 
ddply(std, .(GRADE), summarise, v1=max(WEIGHT), v2=max(HEIGHT)) 

#참고 - 서로 다른 그룹 연산함수 전달 
aggregate(cbind(WEIGHT,  HEIGHT) ~GRADE, data=std, c(max, min)) #불가
ddply(std, .(GRADE), summarise, v1=min(WEIGHT), v2=max(HEIGHT)) #가능 

#연습문제 
#delivery.csv 파일을 읽고 각 읍면동별 통화건수의 총 합을 구하되, 
#단 각 동은 숫자를 포함하고 있는경우 숫자를 제외하 동까지 표현하도록함 ( ex: 을지로 6가 => 을지로) 

unique(deli$읍면동) 
deli$읍면동<-str_remove_all(deli$읍면동, '[0-9]') 

str(deli) 
aggregate(통화건수 ~ 읍면동, data=deli, FUN=sum)
ddply(deli, .(읍면동), summarise, v1=sum(통화건수))


#선생님
str_remove_all(deli$읍면동, '[0-9가]' )

f1 <- function(x) {
str_split(x, '[0-9]') [[1]][1]
} 

deli$읍면동<-sapply(deli$읍면동, f1) 
ddply(deli, .(읍면동), summarise, CNT=sum(통화건수))

#데이터 구조 변경 : stack, unstack , 데이터프레임안에 있는 모든 컬럼이 대상임 제외하고 그런 것 없음 
1.stack(x) : wide -> long  데이터로 변경 
2. unstack(data, formular) long -> wide 데이터로 변경 #formular ( 데이터값 ~ 식별자(컬럼으로 표현될 대상)) 

#예시) 각 지점별 분기별 판매량 데이터 
# wide data , 교차 테이블
#행별, 컬럼별 그룹연산 수행 가능 
#조인 불가  
  1  2  3  4  (분기) 
A 10 11       판매량 
B
C
D

#long data(tidy data), 패널데이터 
#데이터베이스에서 선호하는 데이터 형식  
#새로운 데이터( 관찰대상) 에 대한 추가가 비교적 용이 


지점 분기 판매량 
A  1  10
A  2  11
 ...
D  4  20


#예제 다음의 데이터 프레임에 대해 stack, unstack 처리 
df1 <- data.frame ( apple = c(10,20,30), banana=c(11,9,8), mango= c(3,4,5)) 
df1 
  apple banana mango
1    10     11     3
2    20      9     4
3    30      8     5

df2 <- stack(df1) #모든 컬럼들이 ind로 들어가고 해당컬럼의 데이터값이 values 컬럼으로 들어감  
 values    ind (자동생성, 식별자) 
1     10  apple
2     20  apple
3     30  apple
4     11 banana
5      9 banana
6      8 banana
7      3  mango
8      4  mango
9      5  mango

unstack(df2, values ~ ind) 
apple banana mango
1    10     11     3
2    20      9     4
3    30      8     5

# 연습문제 
# melt.csv 파일을 읽고 라떼의 수량에 대해 아래의 교차 테이블 완성 
#                      1  2  3  4  5  ...  12 
#               2000  400 401 402 
#               2001  412
getwd()
melt <- read.csv('melt_ex.csv', stringsAsFactors =F) 

melt 

df1_melt <- melt [ , c(1,2,3)] 
str(df1_melt) 


#선생님
df2 <- read.csv('melt_ex.csv', stringsAsFactors =F) 
df3 <- unstack(df2, latte~mon) 
rownames(df3) <- c(2000, 2001) 
colnames(df3) <- str_c(1:12, '월') 
df3 

stack(df2) #모든 col이 ind 데이터로 들어감 

# df2의 데이터 형식 예시 ( year, mon은 고정 name과 qty는 stack) 
year  mon  name  qty 
2000  1    latte 400
           americano 482
		   mocha 298

stack(melt[ , -c(1,2)]) #연도와 월이 고정될 수 없음 

#reshape2 : melt와 decast 처럼 데이터 형식 변경을 위해 필요한 패키지 
# 1. melt 
# wide -> long 데이터 변경 
# stack과 비슷 
# 전체 컬럼이 아닌 일부컬럼 선택 및 제외 가능 
install.packages('reshape2')
library(reshape2) 

melt( data, id.vars, measure.vars, value.name = , variable.name = ) 
# data = 데이터 프레임, id.vars = 쌓지 않을 고정 컬럼, meausre.vars = 쌓을 컬럼, 생략시 id.vars 제외 모두 선택, 
# value.name =, value 컬럼이름, variable.names = ind 컬럼 이름)  

#예제 - 위 melt_ex.csv 파일을 다음과 같은 형식으로 변경 
rm(list = ls ())
year  mon  name  qty
2000  1     latte  400
df2 <- read.csv('melt_ex.csv', stringsAsFactors =F) 
melt(df2, id.vars = c('year', 'mon')) 
melt(df2, id.vars = c('year', 'mon'), variable.name = 'name', value.name ='qty') 











