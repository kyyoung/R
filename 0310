#문자열 처리와 관련 함수 : stringr 패키지 사용
install.packages('stringr') 
library(stringr) 

#1.str_detect 
#-문자열 패턴 확인 함수
#-오라클 like 연산자 기능
#정규식 표현 가능 ($, ^, . 파이썬과 같음 )
v1<-c('abc', 'Abcd', 'bcd')
v2 <-c('abc', 'Abcd12', 'bcd!@', 'aaab') 
 
str_detect(v1, 'a') #'a' 포함여부 확인 (오라클 : like '%a%') T, F, F 출력 
str_detect(v1, '^a') #'a' 시작 여부 확인 (오라클 : like 'a%')
str_detect(v1, 'a$') #'a' 끝나는지 확인 (오라클 : like '%a')                                
str_detect(v1, '^[aA]') #'a' 또는 'A'로 시작하는지 확인 
str_detect(v1, '^.b') #두번째 글자가 b (오라클 : like '_b%') 
str_detect(v1, '^[aAbB]')  #'a' 또는 'A' 또는 'b' 또는 'B'로 시작하는지 확인 
str_detect(v1, '^[aA][bB]')  #첫번째 문자열이 a 또는 A이고 두번째 문자열이 b또는 B 

str_detect(v2, '[0-9]') #숫자를 포함하는 경우
str_detect(v2, '\\d')  #숫자를 포함하는 
str_detect(v2, '[:digit:]') #숫자를 포함하는 

str_detect(v2, '[a-zA-Z]') #영문대소문자 모두를 포함하는 경우
str_detect(v2, '[:alpha:]') #문자를 포함하는 
str_detect(v2, '[:punct:]') #특수문자를 포함하는 

str_detect(v2, 'a{4,5}')  #a가 4회이상 5회이하 반복되는 경우  

#[연습문제] 
#student.csv 파일을 읽고 ID에 'a'를 포함하는 학생의 이름, ID, 학년 출력 
student[str_detect(student$ID, 'a'), c('NAME', 'ID', 'GRADE')] 

#비교 
#in 연산자는 문자열 패턴확인 불가, 문자열이 데이터셋안에 있는지 없는지 T/F 
'a' %in% 'abc'  
student$NAME %in% c('서재수', '김문호') 
 
 
#2.str_count(대상, 패턴) 
#문자열에 포함되어 있는 패턴의 개수
#정규식 표현 가능

str_count(v2, 'a') # a가 포함된 개수 
str_count(v2, '[aA]') #a 또는 A가 포함된 개수 
str_count(v2, '[0-9]') #숫자가 포함된 개수 

#3.str_c(..., sep =  , collapse = )
#-문자열 결합함수
#-오라클의 연결연산자
-sep 옵션 : 결합시 구분자 전달, 백터끼리 결합
-collapse 옵션 : 결합시 구분자 전달, 백터내 결합

v3 <-c('a', 'b', 'c')
v4<-c('A', 'B', 'C') 
str_c('a', 'b', 'c', sep = ';') #"a;b;c" 외부 결합 
str_c(v3, sep = ';') #"a", "b" "c" 결합불가 
str_c(v3, collapse = ';') #"a;b;c" 특정 컬럼 내부의 값을 결합할 경우는 collapse 
str_c('a', 'b', 'c')  #"abc". sep='' 기본 (''사이에는 공백이 없음) 
str_c(v3, v4) #"aA", "bB", "cC" 
str_c(v3, 'is...') #v3 || is ... 

str_c(emp1$ENAME, '의 10% 인상된 연봉은' , emp1$n_sal, '이다.',sep =';') # [1] "SMITH;의 10% 인상된 연봉은;880;이다."
str_c(emp1$ENAME, '의 10% 인상된 연봉은', emp1$n_sal, '이다.', collapse=';') #"SMITH의 10% 인상된 연봉은880이다.;ALLEN의 10% 인상된 연봉은1760이다.


#연습문제 
#emp.csv파일을 읽고 아래와 같은 형식으로 출력
#'SMITH의 10% 인상된 연봉은 880이다' 

str_c(emp1$ENAME, '의 10% 인상된 연봉은', emp1$n_sal, '이다.')

#선생님
str_c(emp1$ENAME, '의 10% 인상된 연봉은', emp1$SAL*1.1, '이다.')


#연습문제
#student.csv 파일을 읽고 ID에 숫자가 2회이상 반복된 학생데이터 제외(행삭제) 
student[str_count(student$ID, '[0-9]')<2, ]

#선생님
v5 <-c('a1b2', 'a123') 
str_count(v5, '[0-9]') >= 2  #숫자가 2번 들어간 것
str_detect(v5, '[0-9]{2}')   #숫자가 2번 연속 나오는 것 
str_detect(v5, '[0-9][0-9]') #숫자가 2번 연속 나오는 것 

student[!str_detect(student$ID, '[0-9]{2}'), ] 


#4. str_length(대상)
# 문자열의 크기 출력
# 오라클 length 함수와 비슷

#5. str_locate(대상, 패턴) 
# 문자열이나 패턴의 위치 출력
# 오라클 instr 함수와 비슷
v6 <- c('a#b#c', 'a##b##c##') 
str_locate(v6, '#') #첫번째 원소만 첫번째 #의 위치 출력 
str_locate_all(v6, '#') #모든 원소의 #의 모든 위치 출력 
str_locate('abc', 'ab') #찾는 문자열의 시작, 끝 위치 다른 경우  

#6. stringr::str_sub(대상, 시작위치, 끝위치) , stringr 안에 있는 내부 함수 
# = substr 으로 대체가능 
# 위치기반 문자열 추출함수
# 오라클 substr이랑 비슷하나 세번째 인자 의미 주의 
# 시작위치 음수가능(뒤에서부터 추출)  (str_sub에서만 가능, substr에서는 불가) 
str_sub(v6,2,3) # 각 원소별 2부터 3위치까지 문자열 추출 
substr(v6,2,3)

#연습문제
# 031-325-1234에서 지역번호 추출, 단 위치 기반으로 

tel <-('031-325-1234')
tel;
str_sub(tel,1,3) 
substr(tel,1,3)

#선생님
v_end <- str_locate('031-356-1234', '-')[1,1] -1 ; v_end 
v_end <- str_locate('031-356-1234', '-')[1,1] ; v_end 
substr('031-356-1234',1, v_end) 


#7. str_replace(대상, 찾을 문자열, 바꿀문자열)
# =replace
# 문자열치환 함수
# oracle replace 함수와 비슷 
str_replace ('abc', 'a', 'A')
str_replace ('abca', 'ab', 'AB') #translate 기능 없음 
str_replace ('abca', 'ab', '')  #삭제 기능

#치환해야할 대상이 여러개라면? replace_all 
str_replace_all('abca','a', '') #발견된 패턴 모두 삭제, 치환 
str_remove_all('abab', 'a') #발견된 패턴 모두 삭제
#주의사항*********
v7<-c('ab', 'NA', 'bc')
str_replace(v7,NA,0) #NA를 치환 불가
str_replace(v7,'ab',NA) #NA로 치환 불가
str_replace('ab','a',0) #문자이외의 값으로 치환 불가 


#[연습문제]
#다음 변수의 10% 인상된 값 출력
#v_sal <-c('1,200', '5,000', '3,300')
v_sal <-c('1,200', '5,000', '3,300'); v_sal
v_sal <- str_replace(v_sal, ',', '')
v_sal <-as.numeric(v_sal) 
v_sal*1.1
v_sal 

#선생님
v_sal <- as.numeric(str_replace_all(v_sal, ',',''))
v_sal*1.1 

#8.str_split(대상, 패턴)
#분리함수
#출력결과가 리스트 
str_split('a#b#c', '#')[[1]][2]   #[[]] list 층 처리 , []몇번째 

#[연습문제] 
# 1) professor.csv 파일을 읽고 1)교수번호가 40으로 시작하는 교수의 이름, 교수번호, pay출력
getwd()
professor <-read.csv('professor.csv', stringsAsFactors=FALSE)
str(professor)
professor[str_detect(professor$PROFNO, '^40'), c("NAME","PROFNO","PAY")]

#선생님 
professor[str_detect(professor$PROFNO, '^40'), c("NAME", "PROFNO", "PAY") ] 

# email_id라는 각 교수의 이메일 아이디를 담는 컬럼 생성  
#2-1)위치기반 : substr + strlocate
substr(professor$EMAIL, 1, str_locate(professor$EMAIL,'@')-1)
professor

#선생님 
#1.위치확인
v_lo <- str_locate(professor$EMAIL, '@')[,1] #[,1] 첫번째 컬럼만 추출 
#2.추출
professor$emaild_id <- substr(professor$EMAIL, 1, vlo-1)

#2-2)분리기반 : str_split
email_id <- c()
  for (i in 1:17){
  email_id <-c(email_id, str_split(professor$EMAIL, '@') [[i]] [1])
}

email_id

#선생님
  str_split(professor$EMAIL, '@')[[1]][1] #첫번째 층의 첫번째 아이디만 나타남 
#그렇기때문에 for문을 사용하여 반복
email_id1 <- c()
email_id1n <- c()
for ( i in 1:nrow(professor)) {
  email_id1<-c(email_id1, str_split(professor$EMAIL[i], '@') [[1]][1] )
  email_id1n<-c(email_id1n ,str_split(professor$EMAIL, '@') [[i]][1] )
  professsor$email_id2[i] <- str_split(professor$EMAIL, '@') [[i]][1]   #컬럼의 위치기반으로 값을 쌓아가는 것이기 때문에 c()필요 없음 
  }

 
 #반복제어문 : 반복문의 흐름을 제어하는 구문
 #1.next : 반복을 스킵, 반복문 내  next 뒤에 실행되는 문장이 스킵됨(수행되지 않음)  
 for (i in 1:10) {
   cmd1      #10번 실행됨
   cmd2      #10번 실행됨 
   if (i==5) { 
     next    #i가 5일 때 next 뒤에 있는 문장이 스킵됨, 즉 반복문 내부에 있는 cmd3 문장이 스킵됨 
   }
  cmd3       #i=5일때 스킵이니까 5일때만 빠지고 나머지 9번은 시행됨  
 }
 cmd4        반복문 밖에 있는 것이니깐 한 번만 수행됨 
 #2.break : 반복문 즉시 종료
  for (i in 1:10) {
   cmd1      #5번 실행됨
   cmd2      #5번 실행됨 
   if (i==5) { 
     break   # i=5가 되는 순간 명령어 수행이 멈춤  
   }
  cmd3       #i=5일때 멈춰지니깐 4번은 시행됨  
 }
 cmd4        반복문 밖에 있는 것이니깐 한 번만 수행됨 
 
 #3.exit : 프로그램 즉시 종료
   for (i in 1:10) {
   cmd1        #5회 수행
   cmd2        #5회 수행 
   if (i==5) { #5가 만나는 순간 종료됨 
     exit(0)   #명령어 수행이 정상적일 때만 프로그램이 종료될 수 있게 하는 명령어 
   }
  cmd3        
 }
 cmd4        #exit이 수행되면 프로그램 자체가 종료되기 때문에 실행되지 않음 
 
 #[연습문제] 
 #1부터 10까지 중 짝수만 출력 
 even_n <-c()
 for (i in 1:10) {
 if (i %% 2 ==0) 
 print (i)

 }
 
 for (i in 1:10) {
  if (i %% 2 !=0) {  # i가 홀수 일때 명령문이 스킵됨 
   next 
  }   
 print (i)
}

