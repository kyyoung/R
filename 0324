#reshape2 
#1. melt : stack 처리
#2. dcast : unstack 처리*** 시각화할때 중요, 그래프 그릴 때 교차테이블을 이용함
help ("dcast") 

dcast(data, formula, fun.aggregate = NULL, ..., 
     value.var =   )
dcast(데이터프레임, 행고정 ~ 컬럼 고정, 요약함수, value컬럼) 

#case1) 교차테이블 생성 
d1 <- read.csv('dcast_ex1.csv') 

  year  name  info value
1 2000 latte   qty   100
2 2000 mocha   qty    80
3 2000 latte price  2200
4 2000 mocha price  2500

value.var -> 교차 테이블 셀에 들어가야할 데이터 값을 갖고 있는 컬럼
info -> 컬럼 고정 : 컬럼이름에 들어갈 데이터 
year, name - > 행고정 , 데이터 형태를 교차테이블로 변화 시켜도 고정되 있는 것 

dcast(d1, year+ name ~ info, value.var = 'value') 

  year  name price qty
1 2000 latte  2200 100
2 2000 mocha  2500  80


#case2) value 컬럼이 여러개인 경우 
d2 <- read.csv('dcast_ex2.csv') 

  year      name qty price
1 2000     latte 100  1200
2 2000     mocha  80  2200
3 2000 americano 200  1000
4 2001     latte 120  1250
5 2001     mocha  70  2300
6 2001 americano 210  1100

price로 정리 할 것인가? qty로 정리할 것인가? 

#value.var 를 생략하면 맨 마지막 숫자 컬럼인 price 컬럼이 value.var 로 지정됨 
dcast(d2, year ~ name) 

Using price as value column: use value.var to override.
  year americano latte mocha
1 2000      1000  1200  2200
2 2001      1100  1250  2300

dcast(d2, year ~ name, value.var = 'qty') 
 year americano latte mocha
1 2000       200   100    80
2 2001       210   120    70

unstack(d2, qty ~name)

#case) 교차테이블 생성시 쉘에 들어갈 값이 여러개인 경우 
#dcast_ex3.csv,  파일을 읽고 연도별 이름별 교차 테이블 
d3 <- read.csv('dcast_ex3.csv') 
 년도 지점  이름 수량
1 2000    A latte  100
2 2000    B latte   90
3 2000    A mocha   60
4 2000    B mocha   50
5 2001    A latte  100
6 2001    B latte   90
7 2000    A mocha   60
8 2000    B mocha   50

dcast(d3, 년도 ~ 이름) #fun.aggregate 생략시 count 계산 

 년도 latte mocha
1 2000     2     4
2 2001     2     0


dcast(d3, 년도~ 이름, sum) # 수량에 대한 요약 필요시 fun.aggregate에 전달  
  년도 latte mocha
1 2000   190   220
2 2001   190     0

dcast(d3, 년도 ~이름, sum, margins = T) #행별, 컬럼별 합
  년도 latte mocha (all)
1  2000   190   220   410
2  2001   190     0   190
3 (all)   380   220   600

dcast(d3, 년도 ~이름, mean, margins = T) #행별, 컬럼별 평균 
   년도 latte mocha    (all)
1  2000    95    55 68.33333
2  2001    95   NaN 95.00000
3 (all)    95    55 75.00000

#연습문제 
#상반기 사원별 월별실적현황_new.csv 파일을 다음과 같은 교차테이블로 표현 

df1 <- read.csv('상반기사원별월별실적현황_new.csv', stringsAsFactors = F) 


dcast( df1, 이름~월, value.var = '성취도') 

#선생님 
df_new <- read.csv('상반기사원별월별실적현황_new.csv', stringsAsFactors = F) 
df_new2 <- dcast(df_new, 이름 ~ 월 ) 

#예제 - 위 데이터에서 사원별 성취도 평균 
apply(df_new2[,-1], 1, mean) 
rowSums(df_new2[,-1])
rowMeans(df_new2[,-1])
colSums(df_new2[,-1])
colMeans(df_new2[,-1])

#연습문제 subway2. csv 파일을 읽고 역별, 시간대별 승하차의 총 합을 출력 
sub <-read.csv('subway2.csv', skip=1, stringsAsFactors = F, na.strings = '') 
str(sub) 

#파이썬 fillna 대체 함수 in R
install.packages('zoo') 
library(zoo) 
zoo :: na.locf(벡터) 

#역이름 채우기 - 외부패키기 활용 
sub$전체 <- na.locf(sub$전체) 

#ddply( ,,,, v1=sum('05~06'), v2=sum) 이용방법 

#shape의 변환  
f1 <- function(x) {
as.numeric(str_remove_all( x, ',')) 
} 

sub[ ,-(1:2)]<-apply(sub[ ,-(1:2)], c(1,2), f1) 

#역별 
sub$total<-apply(sub[,-(1:2)], 1, sum) 

str(sub) 

sub_df<-sub[ ,c(1,2,23)] 
dcast(sub_df, 구분~ 전체, sum, margins = T) 

sub_new <- dcast(sub_df, 구분~ 전체) 
apply(sub_new[, -1], 2, sum) 

#시간대별 
apply(sub [,-(1:2)], 2, sum) 

help(dcast) 

#선생님
#step1) 역이름 이전값 가져오기 
sub$전체 <- na.locf(sub$전체) 
#step2) 천단위 구분기호 제거 및 숫자 변경 
f2 <- function(x) {
as.numeric(str_remove_all(x, ','))
} 
sub[ ,-c(1,2)]<-apply(sub[ ,-c(1,2)], c(1,2), f2)  
#step3) 시간대 정보 컬럼 stack 처리 
ddply(sub, .(전체), summarise, v1=sum(X05.06), v2=sum(X06.07)) #그룹연산 불편 
sub2<-melt(sub, id.vars = c('전체', '구분'), variable.name= '시간', value.name = '수') 
str(sub2) 
sub2$시간 <- as.numeric(substr(sub2$시간, 2,3))

#step4) 역별, 시간대별 승하차 총합 
ddply(sub2, .(전체, 시간), summarise, CNT=sum(수))  
dcast(sub2, 전체 ~ 시간, sum) #그룹연산 수행 가능 


#dplyr 패키지 : 여러가지 함수 사용,  구조화된 전처리, 현업에서 많이사용!! (금요일 시험범위) 
install.packages('dplyr')  
library(dplyr) 
1. select : 컬럼선택 
2. mudate : 컬럼 가공
3. filter : 행 선택 
4. group_by : 그룹연산(그룹핑만) 
5. arrange : 정렬
6. summarise_each : 그룹연산의 실제 연산조건 
 
emp <- read.csv('emp.csv', stringsAsFactors=F) 
#예제1) emp테이블에서 이름, 연봉, 부서번호만 출력 
emp %>% select(ENAME, SAL, DEPTNO)
emp %>% select(ENAME, SAL, DEPTNO) %>% filter(DEPTNO ==10) 

#예제2) emp테이블에서 comm이 na가 아닌 
emp %>% select(ENAME, SAL, DEPTNO) %>% filter(!is.na(COMM)) #에러: 객체 'COMM'를 찾을 수 없습니다, select에서 comm에 관한 정보가 없음 
emp %>% select(ENAME, SAL, DEPTNO, COMM) %>% filter(!is.na(COMM)) #명령어 적은 순서대로 시행이되기에 select 절에서 comm에 관한 정보 언급 
emp %>% filter(!is.na(COMM)) %>% select(ENAME, SAL, DEPTNO) # COMM이 na가 아닌 것을 먼저 뽑고 select 수행 

#예제3) emp 테이블에서 10번 직원의 10% 인상된 정보 출력 
emp %>% select(ENAME, SAL, DEPTNO) %>% filter(DEPTNO==10) %>% mutate(v1=SAL*1.1) 

# 연습문제) student.csv 파일을 읽고 
#1. 각 학생의 이름, 학년, 교수번호 출력 
std <- read.csv('student.csv', stringsAsFactors = F) 

std %>% select(NAME, GRADE, PROFNO) 
#2. 위 정보에 교수번호가 없는 학생을 생략 
std%>% filter(!is.na(PROFNO)) %>% select(NAME, GRADE, PROFNO)  
#3. 위 정보에 각 학생의 성별 컬럼 추가하여 출력 
std%>% filter(!is.na(PROFNO)) %>% select(NAME, GRADE, PROFNO, JUMIN) %>% mutate(v1=ifelse(substr(JUMIN,7,7)==1, '남', '여'))

#선생님 
#1)
std %>% select(NAME, GRADE, PROFNO) 
#2)  
std  %>% select(NAME, GRADE, PROFNO)  %>% filter(!is.na(PROFNO))
#3)

std %>% select(NAME, GRADE, PROFNO, JUMIN) %>% filter(!is.na(PROFNO)) %>% mutate(v1=ifelse(substr(JUMIN,7,7)==1, '남', '여'))

#예제4 ) 위 데이터에서 학년별 정렬 
std %>% select(NAME, GRADE, PROFNO, JUMIN) %>% filter(!is.na(PROFNO)) %>% mutate(v1=ifelse(substr(JUMIN,7,7)==1, '남', '여')) %>% arrange(desc(GRADE),v1)

#예제5) 학년별 키 평균 
std %>% select(NAME, GRADE, HEIGHT) %>% group_by(GRADE) %>% summarise_each(mean, HEIGHT) 

#연습문제 
#1. crime.csv 파일을 읽고, 
c1 <- read.csv('crime.csv', stringsAsFactors = F) 
str(c1)
#1) 구별 년도별 발생 현황 출력(교차테이블) 
ddply(c1, .(구, 년도), summarise, v1=sum(발생))
dcast(c1, 년도~ 구,  value.var = '발생' ) 

#2) 구별 년도별 검거율의 현황 출력(교차테이블) 
dcast(c1, 년도~ 구,  value.var = '검거율' ) 

#2. kimchi_test.csv 파일을 읽고 
k1 <-read.csv('kimchi_test.csv', stringsAsFactors = F) 
str(k1) 
#1) 1월 총각김치의 대형마트 판매량과 판매금액 출력(dplyr)
k1 %>% filter( 판매처 =='대형마트'& 제품 =='총각김치' & 판매월 ==1 ) %>%   select(판매처, 제품, 판매월, 수량, 판매금액) 
#2) 년도별 월별 전체 판매량의 총합 출력(dplyr) 
k1 %>%   select(판매년도, 판매월, 수량) %>% group_by(판매년도, 판매월) %>% summarise_each(sum, 수량) 

ddply(k1, .(판매년도, 판매월), summarise, v1=sum(수량))